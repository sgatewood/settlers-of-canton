module Setup where

import DA.Optional (fromSomeNote)
import qualified DA.Text as T
import Daml.Script
import Catan

-- | A record containing all the parties that we will use in our script
data Parties = Parties
  with
    alice : Party
    bob : Party
    bank: Party
    public: Party

-- | A test user for the create-daml-app network.
-- When a participantName is provided, the testUser will be created/or fetched
-- on the given participant.
data TestUser = TestUser with
  alias : Text
  public : Party
  participantName: Optional ParticipantName

defaultParticipant : Optional ParticipantName
defaultParticipant = None

setupCatan : Party -> Party -> Party -> Script (ContractId Inventory)
setupCatan bankUser alice bob = script do

  bankContract <- submit bankUser do
    createCmd Bank with
      username = bankUser
      players = [alice, bob]

  aliceInventories <- submit bankUser do
    exerciseCmd bankContract CreateInventories with player = alice

  bobInventories <- submit bankUser do
    exerciseCmd bankContract CreateInventories with player = bob

  alicePlot <- submit bankUser do
    exerciseCmd bankContract CreatePlot with player = alice, diceValues = [6,8,9], resourceNames = ["lumber", "bricks", "wool"]

  submit bankUser do
    exerciseCmd bankContract CreatePlot with player = bob, diceValues = [6,8,9], resourceNames = ["lumber", "bricks", "wool"]

  submit bankUser do
    exerciseCmd bankContract UpgradePlot with player = alice, plotId = alicePlot

-- | Create a public party, then create three test users.
setup : Script Parties
setup = do
  public <- createPublic defaultParticipant
  alice <- createTestUser $ TestUser "Alice" public defaultParticipant
  bob <- createTestUser $ TestUser "Bob" public defaultParticipant
  bank <- createTestUser $ TestUser "bank" public defaultParticipant
  setupCatan bank alice bob
  pure $ Parties with
    alice
    bob
    bank
    public

-- | Create a test user.
createTestUser : TestUser -> Script Party
createTestUser TestUser{alias, public, participantName} = do
  u <- getOrCreateUser alias (Some public) participantName
  let p = getPrimaryParty u
  pure p

-- | Create the public party.
createPublic : Optional ParticipantName -> Script Party
createPublic participantName = do
  publicUser <- getOrCreateUser "Public" None participantName
  pure $ getPrimaryParty publicUser


-- | Get a user by their id. If the user doesn't exist, it is created.
getOrCreateUser : Text -> Optional Party -> Optional ParticipantName -> Script User
getOrCreateUser alias publicM participantNameM = do
  userId <- validateUserId $ toUserId alias
  try
    getUser_ userId participantNameM
  catch
    UserNotFound _ -> do
      p <- allocateParty_ alias participantNameM
      let u = User userId (Some p)
      let rights  = CanActAs p :: [CanReadAs public | Some public <- [publicM]]
      createUser_ u rights participantNameM
      pure u

getUser_ : UserId -> Optional ParticipantName -> Script User
getUser_  userId participantNameM = do
  case participantNameM of
    Some participantName -> getUserOn userId participantName
    None -> getUser userId

allocateParty_ : Text -> Optional ParticipantName -> Script Party
allocateParty_ alias participantNameM = do
  case participantNameM of
    Some participantName -> allocatePartyOn alias participantName
    None -> allocateParty alias

createUser_ : User -> [UserRight] ->  Optional ParticipantName -> Script ()
createUser_ user rights participantNameM = do
  case participantNameM of
    Some participantName -> createUserOn user rights participantName
    None -> createUser user rights

-- | Convert a text to a valid user id.
toUserId : Text -> Text
toUserId = T.asciiToLower

-- | Try to get the primary party of a user and fail if the user has no associated primary party.
getPrimaryParty : User -> Party
getPrimaryParty u = fromSomeNote ("User " <> userIdToText u.userId <> " is missing a primary party.") u.primaryParty
