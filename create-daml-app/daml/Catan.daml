module Catan where

settlementRequirements: [Text] = [
  "lumber",
  "brick",
  "wool",
  "grain"
  ]

resourceTypes: [Text] = [
  "lumber",
  "brick",
  "wool",
  "grain",
  "ore"
  ]

template Bank with
    username: Party
    players: [Party]
  where
    signatory username
    observer players

    key username: Party
    maintainer key

    nonconsuming choice CreateInventories: [ContractId Inventory] with
          player: Party
        controller player
        do
          assertMsg "Player must be known by the bank" (elem player players)
          forA resourceTypes (
            \resourceName -> create Inventory with 
            bank = username
            player = player
            resourceName = resourceName
            number = 1)

    nonconsuming choice CreatePlot: (ContractId Plot) with
          player: Party
          diceValues: [Int]
          resourceNames: [Text]
          index: Int
        controller player
        do
          assertMsg "Player must be known by the bank" (elem player players)
          forA settlementRequirements (
            \resourceName -> do
            (resourceId, resource) <- fetchByKey @Inventory (player, resourceName)
            assertMsg ("Not enough " <> resourceName) (resource.number > 0)
            exercise resourceId ApplyDelta with delta = -1)
          create Plot with 
              bank = username
              owner = player
              weight = 1
              diceValues = diceValues
              resourceNames = resourceNames
              index = index

    nonconsuming choice UpgradePlot: (ContractId Inventory) with
          player: Party
          plotNum: Int
        controller player
        do
          (plotId, plot) <- fetchByKey @Plot (player, plotNum)
          assertMsg "Player must be known by the bank" (elem player players)
          (grainId, grain) <- fetchByKey @Inventory (player, "grain")
          (oreId, ore) <- fetchByKey @Inventory (player, "ore")
          assertMsg "Not enough grain" (grain.number >= 2)
          assertMsg "Not enough ore" (ore.number >= 3)
          exercise plotId UpgradeWeight
          exercise grainId ApplyDelta with delta = -2
          exercise oreId ApplyDelta with delta = -3

template Inventory with
    bank: Party
    player: Party
    resourceName: Text
    number: Int
  where
    signatory player
    observer player, bank

    key (player, resourceName): (Party, Text)
    maintainer key._1

    nonconsuming choice ApplyDelta: (ContractId Inventory) with
        delta: Int
      controller player
      do
        archive self
        create this with number = number + delta

    nonconsuming choice TradeFourForOneOf: (ContractId Inventory) with
          destinationResource: Text
        controller player
        do
          assertMsg "Must have at least 4 to trade" (number >= 4)
          (destinationId, destination) <- fetchByKey @Inventory (player, destinationResource)
          assertMsg "Player must be the same" (this.player == destination.player)
          assertMsg "Must trade for a different resource" (this.resourceName /= destination.resourceName)
          
          archive self
          create this with number = number - 4

          archive destinationId
          create Inventory with
            bank = destination.bank
            player = destination.player
            resourceName = destination.resourceName
            number = destination.number + 1

template Plot with
    bank: Party
    owner: Party
    weight: Int
    diceValues: [Int]
    resourceNames: [Text]
    index: Int

  where
    signatory owner
    observer bank, owner

    key (owner, index): (Party, Int)
    maintainer key._1

    nonconsuming choice UpgradeWeight: (ContractId Plot) with
      controller owner
      do
        archive self
        create this with weight = weight + 1
